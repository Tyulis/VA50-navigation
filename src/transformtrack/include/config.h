#ifndef _GEN_CIRCULATION_CONFIG_H
#define _GEN_CIRCULATION_CONFIG_H

// THIS FILE IS AUTOGENERATED
// EDIT GENCONFIG.PY AND THE CONFIG FILE TO MODIFY 
	
#include <string>

namespace config {
	namespace node {
		extern const std::string trajectory_node_name;
		extern const std::string transform_node_name;
		extern const std::string image_topic;
		extern const std::string camerainfo_topic;
		extern const std::string velocity_topic;
		extern const std::string trajectory_topic;
		extern const std::string direction_topic;
		extern const std::string pointcloud_topic;
		extern const std::string traffic_sign_topic;
		extern const std::string speed_topic;
		extern const std::string steering_angle_topic;
		extern const std::string transform_service_name;
		extern const std::string drop_service_name;
		extern const std::string road_frame;
		extern const std::string world_frame;
	}
	namespace transform {
		extern const float sim_interval;
	}
	namespace control {
		extern const float target_speed;
		extern const float k;
		extern const float Lfc;
		extern const float Kp;
		extern const float dt;
		extern const float WB;
	}
	namespace environment {
		extern const float lane_width;
		extern const float crosswalk_width;
	}
	namespace birdeye {
		extern const int x_range;
		extern const float y_range;
		extern const float roi_y;
		extern const int birdeye_size;
	}
	namespace preprocess {
		extern const int threshold_window;
		extern const int threshold_bias;
		extern const int open_kernel_size;
		extern const int close_kernel_size;
	}
	namespace markings {
		extern const float size_tolerance;
	}
	namespace intersection {
		namespace intersection_hint_match_threshold {
			extern const float trafficsign;
			extern const float marking;
		}
		extern const int mode_switch_distance;
		extern const int default_rejoin_distance;
		extern const int min_turn_radius;
		extern const int max_turn_radius;
	}
	namespace trajectory {
		extern const int history_size;
		extern const int line_reliability_range;
		extern const int line_reliability_dampening;
		extern const float line_reliability_extension_penalty;
		extern const float trajectory_step;
		extern const int trajectory_range;
		extern const int trajectory_start;
		extern const float line_score_threshold;
		extern const float trajectory_score_threshold;
	}
	namespace find_lines_parameters {
		extern const int savgol_degree;
		extern const int initial_filter_window;
		extern const int smoothing_filter_window;
		extern const int branch_step;
		extern const int min_branch_length;
		extern const int min_line_length;
		extern const int max_curvature_metric;
		extern const int curvature_filter_size;
		extern const int curvature_filter_deviation;
		extern const int merge_max_distance;
		extern const int estimate_start;
		extern const int estimate_end;
		extern const float max_angle_diff;
		extern const int max_rmse;
	}
	namespace fuzzy_lines {
		extern const int local_area_x;
		extern const int local_area_y;
		extern const int base_score;
		namespace centers {
			extern const float forward_distance[3];
			extern const float line_distance[3];
			extern const float line_lengths[3];
			extern const float parallel_distances[3];
			extern const float parallel_angles[3];
			extern const float output[5];
		}
		namespace malus {
			extern const int forward_distance[3];
			extern const int line_distance[3];
			extern const int line_lengths[3];
			extern const int parallel_distances[3];
			extern const int parallel_angles[3];
		}
		extern const float lane_selection_threshold;
		extern const float single_line_selection_threshold;
		extern const float vertical_angle_tolerance;
		extern const float main_angle_cut;
	}
}

#endif
