#include "config.h"

// THIS FILE IS AUTOGENERATED
// EDIT GENCONFIG.PY AND THE CONFIG FILE TO MODIFY 

namespace config {
	namespace node {
		const std::string trajectory_node_name = "trajectory";
		const std::string transform_node_name = "transform_batch_server";
		const std::string image_topic = "/forwardCamera/image_raw";
		const std::string camerainfo_topic = "/forwardCamera/camera_info";
		const std::string velocity_topic = "/ZOE2UTBM/car/velocity";
		const std::string pointcloud_topic = "/lidar";
		const std::string trajectory_topic = "/navigation/trajectory";
		const std::string direction_topic = "/navigation/direction";
		const std::string traffic_sign_topic = "/navigation/traffic_sign";
		const std::string speed_topic = "/ZOE2UTBM/control/speed";
		const std::string speed_cap_topic = "/ZOE2UTBM/control/max_speed";
		const std::string steering_angle_topic = "/ZOE2UTBM/control/steering_angle";
		const std::string transform_service_name = "/circulation/TransformBatch";
		const std::string drop_service_name = "/circulation/DropVelocity";
		const std::string road_frame = "base_link";
		const std::string world_frame = "map";
	}
	namespace transform {
		const float sim_interval = 0.005;
	}
	namespace control {
		const float target_speed = 10.0;
		const float k = 0.1;
		const float Lfc = 5.0;
		const float Kp = 0.5;
		const float dt = 0.1;
		const float WB = 2.588;
	}
	namespace environment {
		const float lane_width = 3.5;
		const float crosswalk_width = 0.5;
	}
	namespace birdeye {
		const int x_range = 15;
		const float y_range = 21.8;
		const float roi_y = 4.8;
		const int birdeye_size = 500;
	}
	namespace preprocess {
		const int threshold_window = 33;
		const int threshold_bias = -5;
		const int open_kernel_size = 4;
		const int close_kernel_size = 5;
	}
	namespace markings {
		const float size_tolerance = 0.2;
	}
	namespace intersection {
		namespace intersection_hint_match_threshold {
			const float trafficsign = 1.0;
			const float marking = 3.85;
		}
		const int mode_switch_distance = 3;
		const int default_rejoin_distance = 10;
		const int min_turn_radius = 5;
		const int max_turn_radius = 25;
		const int hint_detection_buffer = 5;
	}
	namespace trajectory {
		const int history_size = 15;
		const int line_reliability_range = 22;
		const int line_reliability_dampening = 3;
		const float line_reliability_extension_penalty = 1.8;
		const float trajectory_step = 0.5;
		const int trajectory_range = 15;
		const int trajectory_start = 0;
		const float line_score_threshold = 0.5;
		const float trajectory_score_threshold = 0.5;
	}
	namespace find_lines_parameters {
		const int savgol_degree = 2;
		const int initial_filter_window = 25;
		const int smoothing_filter_window = 9;
		const int branch_step = 10;
		const int min_branch_length = 8;
		const int min_line_length = 35;
		const int max_curvature_metric = 1;
		const int curvature_filter_size = 9;
		const int curvature_filter_deviation = 1;
		const int merge_max_distance = 140;
		const int estimate_start = 1;
		const int estimate_end = 8;
		const float max_angle_diff = 0.86;
		const int max_rmse = 2;
	}
	namespace fuzzy_lines {
		const int local_area_x = 5;
		const int local_area_y = 10;
		const int base_score = 4;
		namespace centers {
			const float forward_distance[3] = {4.8, 10.8, 21.8};
			const float line_distance[3] = {0, 0.5, 2};
			const float line_lengths[3] = {10, 5, 0.0};
			const float parallel_distances[3] = {0, 0.3, 1};
			const float parallel_angles[3] = {0, 0.51, 1.24};
			const float output[5] = {0, 0.25, 0.5, 0.8, 1};
		}
		namespace malus {
			const int forward_distance[3] = {0, -1, -3};
			const int line_distance[3] = {0, -2, -3};
			const int line_lengths[3] = {0, -1, -2};
			const int parallel_distances[3] = {0, -2, -5};
			const int parallel_angles[3] = {0, -1, -5};
		}
		const float lane_selection_threshold = 0.7;
		const float single_line_selection_threshold = 0.6;
		const float vertical_angle_tolerance = 0.5;
		const float main_angle_cut = 0.43;
	}
}
