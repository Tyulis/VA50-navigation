import os
import sys
import yaml

HEADER_TEMPLATE = (
"""#ifndef _GEN_CIRCULATION_CONFIG_H
#define _GEN_CIRCULATION_CONFIG_H

// THIS FILE IS AUTOGENERATED
// EDIT GENCONFIG.PY AND THE CONFIG FILE TO MODIFY 

#include <array>
#include <string>

namespace config {
{% content %}
}

#endif
""")

def indent(content):
	return "\n".join("\t" + line for line in content.splitlines())

def build_namespace(parameters):
	header_content = ""
	for key, value in parameters.items():
		key = key.replace("-", "_")
		if type(value) == int:
			header_content += f"constexpr int {key} = {value};\n"
		elif type(value) == float:
			header_content += f"constexpr float {key} = {value};\n"
		elif type(value) == bool:
			header_content += f"constexpr bool {key} = {str(value).lower()};\n"
		elif type(value) == str:
			header_content += f"constexpr char {key}[] = \"{value}\";\n"
		elif type(value) in (list, tuple):
			if all(type(item) == int for item in value):
				header_content += f"constexpr int {key}[{len(value)}] = {{{', '.join(map(str, value))}}};\n"
			else:
				header_content += f"constexpr float {key}[{len(value)}] = {{{', '.join(map(str, value))}}};\n"
		elif type(value) == dict:
			header_sub = build_namespace(value)
			header_content += f"namespace {key} {{\n{indent(header_sub)}\n}}\n"
	return header_content
		

if __name__ == "__main__":
	with open(sys.argv[1], "r") as parameterfile:
		parameters = yaml.load(parameterfile, yaml.Loader)
	
	header_content = build_namespace(parameters)
	header = HEADER_TEMPLATE.replace("{% content %}", indent(header_content))

	for package in sys.argv[2:]:
		with open(os.path.join("src", package, "include", "config.h"), "w") as f:
			f.write(header)